fn main(){
    // Rust 中的闭包（closure），也叫做 lambda 表达式或者 lambda，
    // 是一类能够捕获周围作用域中变量的函数。
    // 调用一个闭包和调用一个函数完全相同，
    // 不过调用闭包时，输入和返回类型两者都可以自动推导，而输入变量名必须指明。
    // 其他的特点包括：
    // 声明时使用 || 替代 () 将输入参数括起来。
    // 函数体定界符（{}）对于单个表达式是可选的，其他情况必须加上。
    // 有能力捕获外部环境的变量。

    // 闭包也可以赋值给一个变量，可以通过调用这个变量来完成闭包的调用。

    let double = |x| {x * 2};
    let y = double(5);
    println!("double(5) = {y}");

    let add = |a, b| {a + b};
    let x = add(2, 4);
    println!("add(2, 4) = {x}");

    let v = 3;
    let add2 = |x| {v + x};
    println!("add2(4) = {}", add2(4));
}